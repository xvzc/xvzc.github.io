/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VimSelectInputMethod
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var child = __toESM(require("child_process"));
var DEFAULT_SETTINGS = {
  executablePath: "/opt/homebrew/bin/im-select",
  defaultInputMethod: "com.apple.keylayout.ABC",
  restorePrevious: false
};
var VimSelectInputMethod = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.initialized = false;
    this.cmEditor = null;
    this.previousInput = null;
    this.onVimModeChange = async (cm) => {
      if (cm.mode == "normal" || cm.mode == "visual") {
        if (this.settings.restorePrevious) {
          const proc = child.spawnSync(this.settings.executablePath, {
            encoding: "utf-8"
          });
          this.previousInput = proc.stdout;
        }
        const cmd = `${this.settings.executablePath} ${this.settings.defaultInputMethod}`;
        child.exec(cmd);
      } else {
        if (this.settings.restorePrevious) {
          const cmd = `${this.settings.executablePath} ${this.previousInput}`;
          child.exec(cmd);
        }
      }
    };
  }
  async onload() {
    await this.loadSettings();
    this.app.workspace.on("file-open", async (_file) => {
      if (!this.initialized)
        await this.initialize();
      if (this.cmEditor) {
        this.cmEditor.on("vim-mode-change", this.onVimModeChange);
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(
      window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3)
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async selectDefaultInputMethod() {
  }
  async initialize() {
    var _a, _b, _c;
    if (this.initialized)
      return;
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    this.cmEditor = (_c = (_b = (_a = view.sourceMode) == null ? void 0 : _a.cmEditor) == null ? void 0 : _b.cm) == null ? void 0 : _c.cm;
    this.initialized = true;
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Executable path").setDesc("The absolute path of the im-select executable").addText(
      (text) => text.setValue(this.plugin.settings.executablePath).onChange(async (value) => {
        this.plugin.settings.executablePath = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Default IM").setDesc("Set default im that will be used for Normal, Visual, etc").addText(
      (text) => text.setValue(this.plugin.settings.defaultInputMethod).onChange(async (value) => {
        this.plugin.settings.defaultInputMethod = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Restore previous IM").setDesc(
      "Set this to true to restore the previous IM when going back to Insert mode"
    ).addToggle(
      (tgl) => tgl.setValue(this.plugin.settings.restorePrevious).onChange(async (value) => {
        this.plugin.settings.restorePrevious = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
